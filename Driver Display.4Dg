#platform "uLCD-28PT"

/****************************************************************************************
*                                                                                       *
*  Driver Display                                                                       *
*                                                                                       *
****************************************************************************************/

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"

#inherit "Driver DisplayConst.inc"

#constant BUFFER_SIZE 20
#constant BUF_BUF, BUF_SIZE, BUF_START, BUF_DATA_SZ
#constant BUF_STRUCT_SIZE 4
#constant ST_NONE, ST_VELOCITY, ST_CURRENT, ST_AVG_VOLTAGE, ST_AVG_TEMP, ST_EFFICIENCY


/*
 * printBuffer
 *
 * Print the data currently stored in the buffer (not the whole buffer)
 *
 * Parameters:
 * - buffer_s: a buffer array-struct
 */
func printBuffer(var buffer_s)
    var b_end;
    b_end := (buffer_s[BUF_START] + buffer_s[BUF_DATA_SZ]) % buffer_s[BUF_SIZE];
    var buf_ptr;
    buf_ptr := buffer_s[BUF_BUF];
    var buf_start;
    buf_start := buffer_s[BUF_START];

    if (buffer_s[BUF_DATA_SZ] == buffer_s[BUF_SIZE]) // overflow condition
        putch(buf_ptr[buf_start]);
        buf_start := (buf_start + 1) % buffer_s[BUF_SIZE];
    endif

    while (buf_start != b_end)
        putch(buf_ptr[buf_start]);
        buf_start := (buf_start + 1) % buffer_s[BUF_SIZE];
    wend
endfunc


/*
 * showBuffer
 *
 * Show the current state of the buffer
 *
 * Parameters:
 * - buffer: a buffer array-struct
 */
func showBuffer(var buffer_s)
    var i;
    var buf_ptr;
    buf_ptr := buffer_s[BUF_BUF];
    for(i:=0; i < buffer_s[BUF_SIZE]; i++)
        putch(buf_ptr[i]);
    next
endfunc


/*
 * storeInBuffer
 *
 * Add a character to a given buffer
 *
 * Parameters:
 * - buffer_s: a buffer array-struct
 * - char: character to add to the buffer
 */
func storeInBuffer(var buffer_s, var char)
    var buf_ptr;
    buf_ptr := buffer_s[BUF_BUF];
    buf_ptr[(buffer_s[BUF_START] + buffer_s[BUF_DATA_SZ]) % buffer_s[BUF_SIZE]] := char;

    if (buffer_s[BUF_DATA_SZ] == buffer_s[BUF_SIZE])
        buffer_s[BUF_START] := (buffer_s[BUF_START] + 1) % buffer_s[BUF_SIZE];
    else if (buffer_s[BUF_DATA_SZ] < buffer_s[BUF_SIZE])
        buffer_s[BUF_DATA_SZ]++;
    endif
endfunc

/*
 * resetBuffer
 *
 * Reset the buffer
 *
 * Parameters:
 * - buffer_s: a buffer array-struct
 */
func resetBuffer(var buffer_s)
    buffer_s[BUF_START] := (buffer_s[BUF_START] + buffer_s[BUF_DATA_SZ]) % BUFFER_SIZE;
    buffer_s[BUF_DATA_SZ] := 0;
endfunc

/*
 * bufferEqual
 *
 * Compare current buffer data to a string
 *
 * Paramters:
 * - buffer_s: a buffer array-struct
 * - str: string to compare to
 *
 * return:
 * 0 if not equal, 1 if equal
 */
func bufferEqual(var buffer_s, var str)
    var b_end;
    var str_index := 0;
    b_end := (buffer_s[BUF_START] + buffer_s[BUF_DATA_SZ]) % buffer_s[BUF_SIZE];
    var buf_ptr;
    buf_ptr := buffer_s[BUF_BUF];
    var buf_start;
    buf_start := buffer_s[BUF_START];
    var char;

    if (buffer_s[BUF_DATA_SZ] == buffer_s[BUF_SIZE]) // overflow condition
        if (buf_ptr[buf_start] != (str[str_index] & 0xFF))
            return 0;
        endif
        buf_start := (buf_start + 1) % buffer_s[BUF_SIZE];
        str_index += 1;
    endif

    while (str_index != strlen(str))
        if (buf_ptr[buf_start] != (str[str_index] & 0xFF))
            return 0;
        endif
        buf_start := (buf_start + 1) % buffer_s[BUF_SIZE];
        str_index += 1;
    wend

    if (buf_start != b_end)
        return 0;
    endif
    return 1;
endfunc


func main()
    // Initialization code
    gfx_Set(SCREEN_MODE,LANDSCAPE_R);

    putstr("Waiting...\n");

    if (!(disk:=file_Mount()))
        while(!(disk :=file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif
    gfx_TransparentColour(0x0020);
    gfx_Transparency(ON);

    hndl := file_LoadImageControl("DRIVER~1.dat", "DRIVER~1.gci", 1);
    // End initialization

    var buffer[BUFFER_SIZE];

    var buf_struct[BUF_STRUCT_SIZE];
    buf_struct[BUF_BUF] := buffer;
    buf_struct[BUF_SIZE] := BUFFER_SIZE;
    buf_struct[BUF_START] := 0;
    buf_struct[BUF_DATA_SZ] := 0;

    var char;

    var velocity := 0;

    var field_state := ST_NONE;

    gfx_Cls();

    repeat
        char := serin(); // char < 0 when no input received.
        if (char >= 0 && char != '|' && char != ':') // receieved non-CR character.
            storeInBuffer(buf_struct, char);
        else if (char == '|')

            if (field_state == ST_VELOCITY) // should be, "if current field is velo", then ...
                txt_MoveCursor(0, 0);
                print("                      ");
                txt_MoveCursor(0, 0);
                print("Velocity: ");
                field_state := ST_NONE;
            else if (field_state == ST_CURRENT)
                txt_MoveCursor(1, 0);
                print("                      ");
                txt_MoveCursor(1, 0);
                print("Current: ");
                field_state := ST_NONE;
            else if (field_state == ST_AVG_VOLTAGE)
                txt_MoveCursor(2, 0);
                print("                      ");
                txt_MoveCursor(2, 0);
                print("Average Voltage: ");
                field_state := ST_NONE;
            else if (field_state == ST_AVG_TEMP)
                txt_MoveCursor(3, 0);
                print("                      ");
                txt_MoveCursor(3, 0);
                print("Average Temperature: ");
                field_state := ST_NONE;
            else if (field_state == ST_EFFICIENCY)
                txt_MoveCursor(4, 0);
                print("                      ");
                txt_MoveCursor(4, 0);
                print("Efficiency: ");
                field_state := ST_NONE;
            endif

            printBuffer(buf_struct);
            resetBuffer(buf_struct);
        else if (char == ':')
            if (bufferEqual(buf_struct, "velo"))
                field_state := ST_VELOCITY;
            else if (bufferEqual(buf_struct, "curr"))
                field_state := ST_CURRENT;
            else if (bufferEqual(buf_struct, "avlt"))
                field_state := ST_AVG_VOLTAGE;
            else if (bufferEqual(buf_struct, "atmp"))
                field_state := ST_AVG_TEMP;
            else if (bufferEqual(buf_struct, "effy"))
                field_state := ST_EFFICIENCY;
            endif

            resetBuffer(buf_struct);
        endif

    forever
endfunc
